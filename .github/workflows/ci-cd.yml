# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        env:
          DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "basmafj" --password-stdin

      - name: Build Docker images for services
        run: |
          docker build -t basmafj/api-gateway:latest -f api-gateway/Dockerfile .
          docker build -t basmafj/geo-location-service:latest -f geo-location-service/Dockerfile .
          docker build -t basmafj/user-service:latest -f user-service/Dockerfile .
          docker build -t basmafj/ticket-service:latest -f ticket-service/Dockerfile .
          docker build -t basmafj/timetable-service:latest -f timetable-service/Dockerfile .
          docker build -t basmafj/subscription-service:latest -f subscription-service/Dockerfile .

      - name: List Docker images
        run: docker images

      - name: Push Docker images to Docker Hub
        run: |
          docker push basmafj/api-gateway:latest
          docker push basmafj/geo-location-service:latest
          docker push basmafj/user-service:latest
          docker push basmafj/ticket-service:latest
          docker push basmafj/timetable-service:latest
          docker push basmafj/subscription-service:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Update kubeconfig for Amazon EKS
        run: aws eks update-kubeconfig --name spacenews --region eu-north-1

      - name: Deploy to Amazon EKS
        run: |
          kubectl apply -f api-gateway-deployment.yaml
          kubectl apply -f geo-location-service-deployment.yaml
          kubectl apply -f user-service-deployment.yaml
          kubectl apply -f ticket-service-deployment.yaml
          kubectl apply -f timetable-service-deployment.yaml
          kubectl apply -f subscription-service-deployment.yaml
          kubectl apply -f mongo-db-deployment.yaml
          kubectl apply -f postgres-db-deployment.yaml
